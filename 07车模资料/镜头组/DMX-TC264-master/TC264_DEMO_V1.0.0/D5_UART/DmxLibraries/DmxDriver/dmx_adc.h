/****************************************************************************************
 *     COPYRIGHT NOTICE
 *     Copyright (C) 2023,AS DAIMXA
 *     copyright Copyright (C) 呆萌侠DAIMXA,2023
 *     All rights reserved.
 *     技术讨论QQ群：710026750
 *
 *     除注明出处外，以下所有内容版权均属呆萌侠智能科技所有，未经允许，不得用于商业用途，
 *     修改内容时必须保留呆萌智能侠科技的版权声明。
 *      ____    _    ___ __  ____  __    _
 *     |  _ \  / \  |_ _|  \/  \ \/ /   / \
 *     | | | |/ _ \  | || |\/| |\  /   / _ \
 *     | |_| / ___ \ | || |  | |/  \  / ___ \
 *     |____/_/   \_\___|_|  |_/_/\_\/_/   \_\
 *
 * @file       dmx_adc.h
 * @brief      呆萌侠TC264开源库
 * @company    合肥呆萌侠智能科技有限公司
 * @author     呆萌侠科技（QQ：2453520483）
 * @MCUcore    TC264
 * @Software   AURIX Development Stdio V1.8.0
 * @version    查看说明文档内version版本说明
 * @Taobao     https://daimxa.taobao.com/
 * @Openlib    https://gitee.com/daimxa
 * @date       2023-11-10
****************************************************************************************/

#ifndef DMXLIBRARIES_DMX_ADC_H_
#define DMXLIBRARIES_DMX_ADC_H_

#include "IfxVadc_Adc.h"

// ADC采样频率最大为10Mhz
#define ADC_SAMPLE_FREQ     10000000
// ADC通道总数不可修改
#define ADC_CHANNEL_SUM     16
// ADC引脚枚举
typedef enum
{
    // ADC模块第0组
    A0,     // TC264中ADC模块的第0组中的第0个通道，对应TC264引脚A0
    A1,     // TC264中ADC模块的第0组中的第1个通道，对应TC264引脚A1
    A2,     // TC264中ADC模块的第0组中的第2个通道，对应TC264引脚A2
    A3,     // TC264中ADC模块的第0组中的第3个通道，对应TC264引脚A3
    A4,     // TC264中ADC模块的第0组中的第4个通道，对应TC264引脚A4
    A5,     // TC264中ADC模块的第0组中的第5个通道，对应TC264引脚A5
    A6,     // TC264中ADC模块的第0组中的第6个通道，对应TC264引脚A6
    A7,     // TC264中ADC模块的第0组中的第7个通道，对应TC264引脚A7
    A8,     // TC264中ADC模块的第0组中的第8个通道，对应TC264引脚A8
    X01,    // ！！！！！TC264中无此引脚，此处使用为占位所需！！！！！
    A10,    // TC264中ADC模块的第0组中的第10个通道，对应TC264引脚A10
    A11,    // TC264中ADC模块的第0组中的第11个通道，对应TC264引脚A11
    A12,    // TC264中ADC模块的第0组中的第12个通道，对应TC264引脚A12
    A13,    // TC264中ADC模块的第0组中的第13个通道，对应TC264引脚A13
    X02,    // ！！！！！TC264中无此引脚，此处使用为占位所需！！！！！
    X03,    // ！！！！！TC264中无此引脚，此处使用为占位所需！！！！！

    // ADC模块第1组
    A16,    // TC264中ADC模块的第1组中的第0个通道，对应TC264引脚A16
    A17,    // TC264中ADC模块的第1组中的第1个通道，对应TC264引脚A17
    X04,    // ！！！！！TC264中无此引脚，此处使用为占位所需！！！！！
    X05,    // ！！！！！TC264中无此引脚，此处使用为占位所需！！！！！
    A20,    // TC264中ADC模块的第1组中的第4个通道，对应TC264引脚A20
    A21,    // TC264中ADC模块的第1组中的第5个通道，对应TC264引脚A21
    X06,    // ！！！！！TC264中无此引脚，此处使用为占位所需！！！！！
    X07,    // ！！！！！TC264中无此引脚，此处使用为占位所需！！！！！
    A24,    // TC264中ADC模块的第1组中的第8个通道，对应TC264引脚A24
    A25,    // TC264中ADC模块的第1组中的第9个通道，对应TC264引脚A25
    X08,    // ！！！！！TC264中无此引脚，此处使用为占位所需！！！！！
    X09,    // ！！！！！TC264中无此引脚，此处使用为占位所需！！！！！
    X10,    // ！！！！！TC264中无此引脚，此处使用为占位所需！！！！！
    X11,    // ！！！！！TC264中无此引脚，此处使用为占位所需！！！！！
    X12,    // ！！！！！TC264中无此引脚，此处使用为占位所需！！！！！
    X13,    // ！！！！！TC264中无此引脚，此处使用为占位所需！！！！！

    // ADC模块第2组
    X14,    // ！！！！！TC264中无此引脚，此处使用为占位所需！！！！！
    X15,    // ！！！！！TC264中无此引脚，此处使用为占位所需！！！！！
    X16,    // ！！！！！TC264中无此引脚，此处使用为占位所需！！！！！
    A35,    // TC264中ADC模块的第2组中的第3个通道，对应TC264引脚A35
    A36,    // TC264中ADC模块的第2组中的第4个通道，对应TC264引脚A36
    A37,    // TC264中ADC模块的第2组中的第5个通道，对应TC264引脚A37
    A38,    // TC264中ADC模块的第2组中的第6个通道，对应TC264引脚A38
    A39,    // TC264中ADC模块的第2组中的第7个通道，对应TC264引脚A39
    X17,    // ！！！！！TC264中无此引脚，此处使用为占位所需！！！！！
    X18,    // ！！！！！TC264中无此引脚，此处使用为占位所需！！！！！
    /*此处可能有同学疑惑A44引脚为什么对应的是第42个，因为此处枚举是
    按照每组的通道号进行递增枚举的，而A44引脚是第二组的第10个通道，
    所以说A44引脚对应的是第42个*/
    A44,    // TC264中ADC模块的第2组中的第10个通道，对应TC264引脚A44
    A45,    // TC264中ADC模块的第2组中的第11个通道，对应TC264引脚A45
    A46,    // TC264中ADC模块的第2组中的第12个通道，对应TC264引脚A46
    A47,    // TC264中ADC模块的第2组中的第13个通道，对应TC264引脚A47
    A48,    // TC264中ADC模块的第2组中的第14个通道，对应TC264引脚A48
    A49,    // TC264中ADC模块的第2组中的第15个通道，对应TC264引脚A49
}ADC_pin_enum;

// ADC分辨率枚举
typedef enum
{
    ADC8BIT,     // 8位分辨率   获取ADC范围为0~255
    ADC10BIT,    // 10位分辨率  获取ADC范围为0~1023
    ADC12BIT,    // 12位分辨率  获取ADC范围为0~4095
}ADC_res_enum;

/**
*
* @brief    adc初始化
* @param    adc_pin     选择需要初始化adc引脚(dmx_adc.h文件里已枚举定义)
* @return   void
* @notes    调用此函数前可查看dmx_adc.h文件里枚举的可用引脚
* Example:  init_adc(A0);   // 初始化A0引脚
*
**/
void init_adc(ADC_pin_enum adc_pin);

/**
*
* @brief    adc转换一次即获取一次ad值
* @param    adc_pin     选择需要读取的adc引脚(dmx_adc.h文件里已枚举定义)
* @param    adc_res     选择adc精度(8bit,10bit,12bit)
* @return   void
* @notes
* Example:  get_adc(A0, ADC12BIT);  // 获取一次A0引脚的ad值,精度为12bit即该函数返回值最大为2的十二次方
*
**/
unsigned short get_adc(ADC_pin_enum adc_pin, ADC_res_enum adc_res);

#endif /* DMXLIBRARIES_DMX_ADC_H_ */
